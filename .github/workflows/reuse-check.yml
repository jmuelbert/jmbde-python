---
# SPDX-FileCopyrightText: Free Software Foundation Europe
# SPDX-License-Identifier: GPL-3.0-or-later

name: License Compliance Check

on: # yamlint disable-line rule:truthy
  push:
    branches:
      - main
      - develop
      - release/**
      - resolve-**
    paths-ignore:
      - '**.md'
      - docs/**
      - .github/*.md

  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - '**.md'
      - docs/**
      - .github/*.md

  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  reuse-check:
    name: License Compliance
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: write
      pull-requests: write
      checks: write

    outputs:
      compliance-status: ${{ steps.check.outputs.status }}
      issues-found: ${{ steps.check.outputs.issues }}

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: ⚙️ Setup Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version-file: .python-version # Read python version from a file .python-version
          check-latest: true
          cache: pip
          cache-dependency-path: '**/pyproject.toml'

      - name: 🛠️ Install REUSE Tool
        run: |
          python -m pip install --upgrade pip
          pip install reuse
          reuse --version

      - name: 📝 Create License Templates
        run: |
          mkdir -p .reuse/templates

          # Create GPL-3.0-or-later template
          cat > .reuse/templates/gpl-3.0-or-later.jinja2 << 'EOL'
          {% if copyright_lines %}
          {% for copyright in copyright_lines %}
          {{ copyright }}
          {% endfor %}
          {% endif %}
          SPDX-License-Identifier: GPL-3.0-or-later
          EOL

          # Create MIT template
          cat > .reuse/templates/mit.jinja2 << 'EOL'
          {% if copyright_lines %}
          {% for copyright in copyright_lines %}
          {{ copyright }}
          {% endfor %}
          {% endif %}
          SPDX-License-Identifier: MIT
          EOL

      - name: 🔍 Run REUSE Check
        id: check
        run: |
          # Run initial check
          # Run REUSE lint and capture the output
          reuse lint > reuse-report.txt || true

          # Process results
          if grep -q "not compliant" reuse-report.txt; then
            # Count files with licensing issues
            ISSUES=$(grep -c "not licensed" reuse-report.txt)

            # Update GitHub environment variables
            {
              echo "status=failed"
              echo "issues=$ISSUES"
              echo "compliance-status=failure"
              echo "issues-found=$ISSUES"
            } >> "$GITHUB_ENV"

            # Generate a detailed compliance report
            {
              echo "## 📋 License Compliance Issues"
              echo ""
              echo "Found $ISSUES files with licensing issues:"
              echo ""
              echo "``$("
              cat reuse-report.txt
              echo ")``"
              echo ""
              echo "### 🔨 How to Fix"
              echo "1. Add SPDX headers to each file."
              echo "2. Use appropriate license identifiers."
              echo "3. Update the dep5 file if needed."
            } > compliance-report.md
          else
            # Update GitHub environment variables
            {
              echo "status=passed"
              echo "compliance-status=success"
              echo "issues-found=0"
            } >> "$GITHUB_ENV"

            # Generate a success report
            {
              echo "## ✅ License Compliance Check Passed"
              echo ""
              echo "All files comply with REUSE specifications."
            } > compliance-report.md
          fi


      - name: 📤 Upload Report
        if: always()
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: license-compliance-report
          path: |
            reuse-report.txt
            compliance-report.md
          retention-days: 7

      - name: 🔄 Create Fix PR
        if: steps.check.outputs.compliance-status
        uses: peter-evans/create-pull-request@153407881ec5c347639a548ade7d8ad1d6740e38 # v5.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: fix license compliance issues'
          title: 'docs: fix REUSE compliance issues'
          body-path: compliance-report.md
          branch: fix/license-compliance
          delete-branch: true
          labels: |
            documentation
            license
            automated-pr

      - name: 💬 Add PR Comment
        if: github.event_name == 'pull_request' && steps.check.outputs.status == 'failed'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

  notify:
    needs: reuse-check
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📢 Notify Team
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const message = `## 🚨 License Compliance Issues

            Found ${process.env.ISSUES_COUNT} licensing issues.
            Please review the [workflow results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 License Compliance Issues Detected',
              body: message,
              labels: ['license', 'needs-attention']
            });
        env:
          ISSUES_COUNT: ${{ needs.reuse-check.outputs.issues-found }}
