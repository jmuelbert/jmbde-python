---
# SPDX-FileCopyrightText: oxsecurity
# SPDX-License-Identifier: AGPL-3.0-or-later

name: MegaLinter

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      fix:
        description: 'Apply automatic fixes'
        required: false
        type: boolean
        default: false
      all:
        description: 'Validate all files'
        required: false
        type: boolean
        default: false

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  megalint:
    name: Code Quality Check
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: write
      issues: write
      pull-requests: write
      security-events: write

    outputs:
      has_changes: ${{ steps.ml.outputs.has_updated_sources }}

    env:
      APPLY_FIXES: ${{ github.event_name == 'workflow_dispatch' && inputs.fix || 'all' }}
      APPLY_FIXES_EVENT: pull_request
      APPLY_FIXES_MODE: pull_request
      VALIDATE_ALL_CODEBASE: ${{ github.event_name == 'workflow_dispatch' && inputs.all || 'false' }}

    steps:
      - name: üîí Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: üß∞ Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: üß™ Run MegaLinter
        id: ml
        uses: oxsecurity/megalinter@bacb5f8674e3730b904ca4d20c8bd477bc51b1a7 # v7.13.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Core Configuration
          DISABLE_ERRORS: false
          FILTER_REGEX_INCLUDE: ".*"
          FILTER_REGEX_EXCLUDE: "(dist/|archive/|node_modules/|.venv/)"
          SHOW_ELAPSED_TIME: true
          PARALLEL: true
          
          # Report Configuration
          UPDATED_SOURCES_REPORTER: true
          GITHUB_STATUS_REPORTER: true
          GITHUB_COMMENT_REPORTER: true
          EMAIL_REPORTER: false
          SARIF_REPORTER: true
          
          # Python specific
          PYTHON_BLACK_CONFIG_FILE: pyproject.toml
          PYTHON_PYLINT_CONFIG_FILE: .pylintrc
          PYTHON_ISORT_CONFIG_FILE: .isort.cfg
          
          # Additional Configurations
          MARKDOWN_MARKDOWN_LINK_CHECK_CONFIG_FILE: .markdown-link-check.json
          YAML_YAMLLINT_CONFIG_FILE: .yamllint.yml
          JSON_JSONLINT_CONFIG_FILE: .jsonlintrc
          
          # Ignore files
          IGNORE_GITIGNORED_FILES: true
          IGNORE_GENERATED_FILES: true

      - name: üì§ Upload Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: megalinter-reports
          path: |
            megalinter-reports/
            mega-linter.log
          retention-days: 7

      - name: üìä Process Results
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('megalinter-reports/megalinter-report.json', 'utf8'));
              
              let summary = '## üîç MegaLinter Results\n\n';
              
              // Add statistics
              summary += '### üìä Statistics\n';
              summary += `- Files analyzed: ${report.files_analyzed}\n`;
              summary += `- Errors found: ${report.total_errors}\n`;
              summary += `- Fixes applied: ${report.fixed_errors}\n\n`;
              
              // Add errors by linter
              if (report.total_errors > 0) {
                summary += '### ‚ùå Errors by Linter\n';
                Object.entries(report.linters_stats).forEach(([linter, stats]) => {
                  if (stats.errors > 0) {
                    summary += `- ${linter}: ${stats.errors} error(s)\n`;
                  }
                });
              }
              
              // Add comment to PR
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.payload.pull_request.number,
                  body: summary
                });
              }
              
            } catch (error) {
              console.error('Error processing results:', error);
            }

      - name: üìù Create Fix PR
        if: steps.ml.outputs.has_updated_sources == 1
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c # v6.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "style: apply automatic linter fixes"
          title: "style: apply automatic linter fixes"
          body: |
            ü§ñ MegaLinter has automatically fixed code style issues.
            
            ### Changes made:
            - Applied automatic formatting fixes
            - Updated code style to match guidelines
            
            Please review the changes and merge if appropriate.
          branch: fix/megalinter-fixes
          delete-branch: true
          labels: |
            automated-pr
            style
          draft: false

      - name: üè∑Ô∏è Update PR Labels
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const labels = [];
            if (process.env.has_updated_sources === '1') {
              labels.push('needs-review');
            } else {
              labels.push('linter-approved');
            }
            
            await github.rest.issues.addLabels({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              labels: labels
            });

      - name: üö® Check Failure
        if: failure()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const message = `‚ùå MegaLinter checks failed. Please review the [workflow logs](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}) for details.`;
            
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.pull_request.number,
              body: message
            });
