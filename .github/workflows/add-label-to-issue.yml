---
# SPDX-FileCopyrightText: GitHub, Inc. and contributors
# SPDX-License-Identifier: MIT

name: Issue Auto-Labeler

on: # yamllint disable-line rule:truthy
  issues:
    types: [opened, reopened]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  label-issue:
    name: Process Issue Labels
    if: |
      !github.event.issue.pull_request &&
      !contains(github.event.issue.labels.*.name, 'invalid') &&
      github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      issues: write

    steps:
      - name: üîí Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: üè∑Ô∏è Process Labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const LABEL_CONFIG = {
              defaultLabels: ['needs-triage'],
              titlePrefixes: {
                '[BUG]': ['type-bug', 'needs-triage'],
                '[FEATURE]': ['type-feature', 'needs-triage'],
                '[DOCS]': ['documentation', 'needs-triage'],
                '[QUESTION]': ['question', 'needs-triage'],
              },
              contentTriggers: {
                'Traceback (most recent call last)': ['type-crash', 'high-priority'],
                'SecurityError': ['security', 'high-priority'],
                'regression': ['regression', 'needs-investigation'],
              }
            };

            async function processIssueLabels() {
              try {
                const { data: issue } = await github.rest.issues.get({
                  ...context.repo,
                  issue_number: context.issue.number
                });

                let labelsToAdd = new Set(LABEL_CONFIG.defaultLabels);

                // Check title prefixes
                for (const [prefix, labels] of Object.entries(LABEL_CONFIG.titlePrefixes)) {
                  if (issue.title.toUpperCase().startsWith(prefix)) {
                    labels.forEach(label => labelsToAdd.add(label));
                  }
                }

                // Check content triggers
                const body = issue.body?.toLowerCase() || '';
                for (const [trigger, labels] of Object.entries(LABEL_CONFIG.contentTriggers)) {
                  if (body.includes(trigger.toLowerCase())) {
                    labels.forEach(label => labelsToAdd.add(label));
                  }
                }

                // Add size label based on body length
                const bodyLength = body.length;
                if (bodyLength > 2000) labelsToAdd.add('size/large');
                else if (bodyLength > 500) labelsToAdd.add('size/medium');
                else labelsToAdd.add('size/small');

                // Filter out existing labels
                const existingLabels = new Set(issue.labels.map(l => l.name));
                const newLabels = [...labelsToAdd].filter(label => !existingLabels.has(label));

                if (newLabels.length > 0) {
                  console.log(`Adding labels: ${newLabels.join(', ')}`);
                  await github.rest.issues.addLabels({
                    ...context.repo,
                    issue_number: context.issue.number,
                    labels: newLabels
                  });

                  // Add a comment for high-priority issues
                  if (newLabels.includes('high-priority')) {
                    await github.rest.issues.createComment({
                      ...context.repo,
                      issue_number: context.issue.number,
                      body: `‚ö†Ô∏è This issue has been marked as high priority and will be reviewed soon.`
                    });
                  }
                }

                // Add reaction to confirm processing
                await github.rest.reactions.createForIssue({
                  ...context.repo,
                  issue_number: context.issue.number,
                  content: 'eyes'
                });

              } catch (error) {
                console.error('Error processing labels:', error);
                core.setFailed(`Failed to process labels: ${error.message}`);

                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: context.issue.number,
                  body: `‚ùå Error processing issue labels: ${error.message}\nPlease contact maintainers.`
                });
              }
            }

            await processIssueLabels();

      - name: üìä Report Processing
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const duration = Date.now() - new Date(context.payload.issue.created_at).getTime();
            console.log(`Label processing completed in ${duration}ms`);
