---
# SPDX-FileCopyrightText: Jef LeCompte
# SPDX-License-Identifier: MIT

name: Pull Request Quality Check

on: # yamllint disable-line rule:truthy
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled, unlabeled]

  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  lint-pr:
    name: Validate Pull Request
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      pull-requests: write
      statuses: write

    outputs:
      title-valid: ${{ steps.check-title.outputs.valid }}
      body-valid: ${{ steps.check-body.outputs.valid }}

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          fetch-depth: 0

      - name: 🔍 Check PR Title
        id: check-title
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const conventionalCommitRegex = /^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\([a-z -]+\))?: .{1,100}$/;
            const prTitle = context.payload.pull_request.title;
            const isValid = conventionalCommitRegex.test(prTitle);

            core.setOutput('valid', isValid);

            if (!isValid) {
              core.setFailed(`Invalid PR title: "${prTitle}"`);

              const validTypes = [
                'build', 'chore', 'ci', 'docs', 'feat', 'fix',
                'perf', 'refactor', 'revert', 'style', 'test'
              ];

              const comment = `### ❌ Invalid Pull Request Title

              Your PR title must follow the [Conventional Commits](https://www.conventionalcommits.org/) format:

              \`\`\`
              type(scope): description
              \`\`\`

              Valid types:
              ${validTypes.map(type => `- \`${type}\``).join('\n')}

              Examples:
              - \`feat(auth): add login functionality\`
              - \`fix(api): handle null response\`
              - \`docs(readme): update installation steps\`

              Please edit your PR title to match this format.`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: 📝 Check PR Body
        id: check-body
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const body = context.payload.pull_request.body || '';
            const requiredSections = ['Description', 'Related Issue', 'Testing'];
            const missingTemplates = [];

            for (const section of requiredSections) {
              if (!body.includes(`### ${section}`)) {
                missingTemplates.push(section);
              }
            }

            const isValid = missingTemplates.length === 0;
            core.setOutput('valid', isValid);

            if (!isValid) {
              const comment = `### ❌ Incomplete Pull Request Description

              Please add the following required sections to your PR description:
              ${missingTemplates.map(section => `- [ ] ${section}`).join('\n')}

              Use our [PR template](.github/pull_request_template.md) as a guide.`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });

              core.setFailed('PR description is missing required sections');
            }

      - name: 🏷️ Update Labels
        if: always()
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const titleValid = '${{ steps.check-title.outputs.valid }}' === 'true';
            const bodyValid = '${{ steps.check-body.outputs.valid }}' === 'true';

            const labelsToAdd = [];
            const labelsToRemove = [];

            if (titleValid && bodyValid) {
              labelsToAdd.push('ready-for-review');
              labelsToRemove.push('needs-work');
            } else {
              labelsToAdd.push('needs-work');
              labelsToRemove.push('ready-for-review');
            }

            // Add type label based on PR title
            const type = context.payload.pull_request.title.split(':')[0].replace(/[()]/g, '');
            if (type) {
              labelsToAdd.push(`type: ${type}`);
            }

            // Apply labels
            if (labelsToAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labelsToAdd
              });
            }

            // Remove labels
            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  name: label
                });
              } catch (error) {
                if (error.status !== 404) throw error;
              }
            }

  validate:
    needs: lint-pr
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📊 Check Results
        if: |
          needs.lint-pr.outputs.title-valid != 'true' ||
          needs.lint-pr.outputs.body-valid != 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.setFailed('Pull request validation failed. Please check the comments for details.');
