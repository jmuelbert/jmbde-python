---
# SPDX-FileCopyrightText: Open Source Security Foundation (OpenSSF)
# SPDX-License-Identifier: Apache-2.0

name: Supply Chain Security Analysis

on: # yamllint disable-line rule:truthy
  schedule:
    - cron: 0 4 * * 1 # Run at 04:00 UTC every Monday

  push:
    branches:
      - main
      - develop
      - release/**
    paths-ignore:
      - "**.md"
      - "**.txt"
      - docs/**
      - .github/*.md
      - LICENSES/**
      - LICENSE
      - ".gitignore"

  pull_request:
    types:
      - opened
      - edited
      - synchronize
    paths-ignore:
      - "**.md"
      - "**.txt"
      - docs/**
      - .github/*.md
      - LICENSES/**
      - LICENSE
      - ".gitignore"

  workflow_dispatch:

permissions:
  contents: read # Base permissions for all jobs

concurrency:
  group: supply-chain-${{ github.ref }}
  cancel-in-progress: true # Ensures only one run per branch is active

jobs:
  analyze:
    name: Supply Chain Security Analysis
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      security-events: write # Required for SARIF uploads
      id-token: write # Needed to publish results with Scorecard

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@v2.7.0
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4.1.5
        with:
          persist-credentials: false

      - name: 🔍 Run Scorecard Analysis
        id: scorecard
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: scorecard.sarif
          results_format: sarif
          publish_results: true

      - name: 📤 Upload SARIF Results
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis
          path: scorecard.sarif
          retention-days: 30

  process-results:
    name: Process Security Results
    needs: analyze
    runs-on: ubuntu-latest

    permissions:
      contents: read

    outputs:
      high-risks: ${{ steps.process.outputs.high-risks }}
      overall-score: ${{ steps.process.outputs.overall-score }}

    steps:
      - name: 🔽 Download Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: security-analysis

      - name: 📊 Process Results
        id: process
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');

            const resultsFile = 'scorecard.sarif';

            if (!fs.existsSync(resultsFile)) {
              throw new Error('Results file not found');
            }

            const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));

            if (!results.runs || results.runs.length === 0) {
              throw new Error('Invalid SARIF format: No runs found');
            }

            const checks = results.runs[0].results || [];
            const highRisks = checks.filter(check => check.level === 'error');

            // Extract overall score safely
            const overallScore = results.runs[0].properties?.score || '0';

            // Generate summary report
            const report = `## 🔒 Supply Chain Security Report\n\n` +
              `### 📊 Overall Score: ${overallScore}/10\n\n` +
              `### 🚨 High Risk Issues\n` +
              (highRisks.length > 0
                ? highRisks.map(risk => `- ${risk.message.text}`).join('\n')
                : '✅ No high-risk issues found\n');

            fs.writeFileSync('security-report.md', report);

            fs.writeFileSync('processed-results.json', JSON.stringify({
              overallScore: overallScore,
              highRisks: highRisks.length
            }, null, 2));

            core.setOutput('high-risks', highRisks.length);
            core.setOutput('overall-score', overallScore);

      - name: 📤 Upload Processed Results
        uses: actions/upload-artifact@v4
        with:
          name: processed-results
          path: processed-results.json
          retention-days: 30

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
  notify:
    name: Notify Security Issues
    needs: process-results
    runs-on: ubuntu-latest

    permissions:
      issues: write # To create notification issues

    steps:
      - name: 🔽 Download Processed Results
        uses: actions/download-artifact@v4
        with:
          name: processed-results

      - name: 🔽 Download Security Report
        uses: actions/download-artifact@v4
        with:
          name: security-report

      - name: 🚨 Security Alert
        if: needs.process-results.outputs.high-risks > 0
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('processed-results.json', 'utf8'));
            const highRisks = results.highRisks;
            const overallScore = results.overallScore;

            const message = `## 🚨 Supply Chain Security Alert

            High risk security issues detected:
            - Score: ${overallScore}/10
            - High Risk Issues: ${highRisks}

            Please review the [security report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Supply Chain Security Issues Detected',
              body: message,
              labels: ['security', 'high-risk', 'needs-attention']
            });
