# SPDX-FileCopyrightText: Open Source Security Foundation (OpenSSF)
# SPDX-License-Identifier: Apache-2.0

name: Supply Chain Security Analysis

on: # yamllint disable-line rule:truthy
  schedule:
    - cron: 0 4 * * 1 # Run at 04:00 UTC every Monday

  push:
    branches:
      - main
      - develop
      - release/**
    paths-ignore:
      - "**.md"
      - "**.txt"
      - docs/**
      - .github/*.md
      - LICENSES/**
      - LICENSE
      - ".gitignore"

  pull_request:
    types:
      - opened
      - edited
      - synchronize
    paths-ignore:
      - "**.md"
      - "**.txt"
      - docs/**
      - .github/*.md
      - LICENSES/**
      - LICENSE
      - ".gitignore"

  workflow_dispatch:

permissions:
  contents: read # Base permissions for all jobs

concurrency:
  group: supply-chain-${{ github.ref }}
  cancel-in-progress: true # Ensures only one run per branch is active

jobs:
  analyze:
    name: Supply Chain Security Analysis
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      security-events: write # Required for SARIF uploads
      id-token: write # Needed to publish results with Scorecard

    steps:
      - name: üîí Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: üß∞ Checkout Repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          persist-credentials: false

      - name: üîç Run Scorecard Analysis
        id: scorecard
        uses: ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534 # v2.3.3
        with:
          results_file: scorecard.sarif
          results_format: sarif
          publish_results: true

      - name: üì§ Upload SARIF Results
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis
          path: scorecard.sarif
          retention-days: 30

  process-results:
    name: Process Security Results
    needs: analyze
    runs-on: ubuntu-latest

    steps:
      - name: üîΩ Download Analysis Results
        uses: actions/download-artifact@v4
        with:
          name: security-analysis

      - name: üìä Process Results
        id: process
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const resultsFile = 'scorecard.sarif';

            if (!fs.existsSync(resultsFile)) {
              throw new Error('Results file not found');
            }
            const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));

            // Extract checks
            const checks = results.runs[0]?.results || [];
