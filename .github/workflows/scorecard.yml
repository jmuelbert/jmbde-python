---
# SPDX-FileCopyrightText: Open Source Security Foundation (OpenSSF)
# SPDX-License-Identifier: Apache-2.0

name: Supply Chain Security Analysis

on:
  schedule:
    - cron: '0 4 * * 1' # Run at 04:00 UTC every Monday

  push:
    branches: [main, develop, 'release/**']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'

  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/*.md'

  workflow_dispatch:
    inputs:
      publish-results:
        description: 'Publish results to OpenSSF'
        required: false
        type: boolean
        default: true

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  analyze:
    name: Supply Chain Analysis
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read

    outputs:
      score: ${{ steps.scorecard.outputs.overall-score }}
      high-risks: ${{ steps.process.outputs.high-risks }}

    steps:
      - name: 🔒 Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: 🧰 Checkout Repository
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          persist-credentials: false

      - name: 🔍 Run Scorecard Analysis
        id: scorecard
        uses: ossf/scorecard-action@dc50aa9510b46c811795eb24b2f1ba02a914e534 # v2.3.3
        with:
          results_file: results/scorecard.sarif
          results_format: sarif
          publish_results: ${{ github.event.inputs.publish-results || true }}
          policy_file: .github/scorecard-policy.yml

      - name: 📊 Process Results
        id: process
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('results/scorecard.sarif', 'utf8'));

            // Process results
            const checks = results.runs[0].results;
            const highRisks = checks.filter(check => check.level === 'error');

            // Generate report
            let report = '## 🔒 Supply Chain Security Report\n\n';

            report += `### 📊 Overall Score: ${process.env.SCORE}/10\n\n`;

            report += '### 🚨 High Risk Issues\n';
            if (highRisks.length > 0) {
              highRisks.forEach(risk => {
                report += `- ${risk.message.text}\n`;
                if (risk.locations) {
                  risk.locations.forEach(loc => {
                    report += `  - ${loc.physicalLocation.artifactLocation.uri}\n`;
                  });
                }
              });
            } else {
              report += '✅ No high risk issues found\n';
            }

            report += '\n### 🔍 Detailed Checks\n';
            checks.forEach(check => {
              report += `- **${check.ruleId}**: ${check.level}\n`;
              report += `  - ${check.message.text}\n`;
            });

            // Write report
            fs.writeFileSync('results/security-report.md', report);

            // Set outputs
            core.setOutput('high-risks', highRisks.length);
        env:
          SCORE: ${{ steps.scorecard.outputs.overall-score }}

      - name: 📤 Upload SARIF Results
        uses: github/codeql-action/upload-sarif@b7cec7526559c32f1616476ff32d17ba4c59b2d6 # v3.25.5
        with:
          sarif_file: results/scorecard.sarif
          category: supply-chain-security

      - name: 📦 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: security-analysis
          path: |
            results/
            .github/scorecard-policy.yml
          retention-days: 30

      - name: 🏷️ Update PR Labels
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const score = parseInt('${{ steps.scorecard.outputs.overall-score }}');
            const labels = [];

            if (score >= 8) {
              labels.push('security: good');
            } else if (score >= 6) {
              labels.push('security: needs-improvement');
            } else {
              labels.push('security: high-risk');
            }

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  notify:
    needs: analyze
    if: |
      always() &&
      needs.analyze.outputs.high-risks > 0
    runs-on: ubuntu-latest
    steps:
      - name: 🚨 Security Alert
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const message = `## 🚨 Supply Chain Security Alert

            High risk security issues detected:
            - Score: ${process.env.SCORE}/10
            - High Risk Issues: ${process.env.HIGH_RISKS}

            Please review the [analysis results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Supply Chain Security Issues Detected',
              body: message,
              labels: ['security', 'high-risk', 'needs-attention']
            });
        env:
          SCORE: ${{ needs.analyze.outputs.score }}
          HIGH_RISKS: ${{ needs.analyze.outputs.high-risks }}
