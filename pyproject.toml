# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "jmbde"
dynamic = ["version"]
description = "JM BDE - Management of the inventory the computer equipment"
readme = "README.rst"
requires-python = ">=3.9"
license = "GPL-3.0-or-later"
authors = [{ name = "Jürgen Mülbert", email = "juergen.muelbert@gmail.com" }]
# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: X11 Applications :: Qt",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Office/Business",
]

[dependencies]
python = ">=3.9, <4.0"
click = "^8.0"
pyside6 = "^6.0"       # Updated to Qt 6.x
sqlalchemy = "^2.0.0"
pydantic = "^2.0.0"

[project.urls]
Homepage = "https://github.com/jmuelbert/jmbde-python"
Documentation = "https://jmbde-python.readthedocs.io"
Repository = "https://github.com/jmuelbert/jmbde-python.git"
"Bug Tracker" = "https://github.com/jmuelbert/jmbde-python/issues"
Changelog = "https://github.com/jmuelbert/jmbde-python/blob/master/CHANGELOG.md"

# Keywords description: https://python-poetry.org/docs/pyproject/#keywords
keywords = [
  "jmbde",
  "business-data-extraction",
  "BDE",
  "database",
  "python-tool",
]

[project.optional-dependencies]
dev = [
  "black>=23.7.0",
  "isort>=5.12.0",
  "mypy>=1.6.1",
  "pylint>=3.0.1",
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "ruff>=0.1.3",
]

[tool.hatch.version]
path = "src/jmbde/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/jmbde"]

[tool.hatch.envs.default]
dependencies = ["pytest", "pytest-cov"]

[tool.hatch.envs.lint]
dependencies = [
    "black>=23.7.0", 
    "mypy>=1.6.1", 
    "isort>=5.12.0",
    "ruff>=0.1.3"]

[tool.hatch.envs.lint.scripts]
style = [
    "ruff check .",
    "ruff format .",
    "black --check .",
    "isort .",
]
typing = "mypy src tests"

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-sugar>=0.9.7",
    "pytest-xdist>=3.3.1",
    "pytest-randomly>=3.15.0",
    "typeguard>=4.1.5",
]

[tool.hatch.envs.test.scripts]
test = "pytest tests/"
cov = [
 "pytest --cov-report=xml --cov-report=html --cov-report=term-missing --cov=src tests/",
 "coverage report",
 ]
typeguard = "pytest --typeguard-packages=src"

[tool.hatch.envs.security]
dependencies = [
  "bandit>=1.7.5",
  "safety>=2.3.5",
  "pip-audit>=2.6.1",
]

[tool.hatch.envs.security.scripts]
check = [
  "bandit -r src/",
  "safety check",
]
audit = "pip-audit"

[tool.hatch.envs.docs]
dependencies = [
  "mkdocs>=1.5.3",
  "mkdocs-material>=9.4.6",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build"
serve = "mkdocs serve"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["jmbde"]

[tool.coverage.report]
show_missing = true
fail_under = 80     # Updated to a more ambitious threshold.

[tool.black]
include = '\.pyi?$'"""

line-length = 88
target-version = ['py39']
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
fix = true

[tool.ruff.format]
docstring-code-line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "B027",   # Allow non-abstract empty methods in abstract base classes.
  "S101",   # Allow `assert` usage for testing.
  "SIM105", # Suppress complex contextlib suggestions.
  "RET503", # Missing explicit return at the end of functions.
  "RET504", # Unnecessary assignments after return.
  "RET505", # Unnecessary else after return.
  "RET506", # Unnecessary elif after raise.
  "S105",
  "S106",   # Ignore password warnings.
  "RUF012", # Ignore mutable class attribute annotations.
  "UP007",  # Suppress type annotation updates for older versions.
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101", "FBT", "INP001", "D", "S603", "PLR2004"]

[tool.mypy]
python_version = "3.9"
disallow_untyped_defs = true
disallow_incomplete_defs = true
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
strict = true
explicit_package_bases = true
namespace_packages = true
warn_no_return = true
warn_unused_ignores = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = ["jmbde.*", "virtualenv.*"]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_no_return = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--color=yes"]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = ["error"]
log_cli_level = "info"
markers = [
  "save_engine: marks tests using an external package for saving charts (e.g., PNG). Run selectively in CI.",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "raise ImportError",
]
ignore_errors = true
omit = ["tests/*", "setup.py"]

[tool.bandit]
exclude_dirs = ["tests"]
targets = ["src"]

[tool.pylint]
max-args = 12
max-branches = 20 # Reduced to encourage simpler methods.
max-returns = 6 # Lowered to improve code clarity.
max-statements = 50
disable = [
  "C0111", # missing-docstring
  "C0103", # invalid-name
  "C0330", # wrong-hanging-indentation
]

[tool.codespell]
builtin = "clear,rare,informal,usage,code,names"
write-changes = true
count = true
skip = "*.svg,pyproject.toml,LICENSE,LICENSES/*,.github/actions/*"
ignore-words-list = "master"

[tool.pylint]
max-args = 12
max-branches = 20 # Reduced to encourage simpler methods.
max-returns = 6 # Lowered to improve code clarity.
max-statements = 50
disable = [
  "C0111", # missing-docstring
  "C0103", # invalid-name
  "C0330", # wrong-hanging-indentation
  "C0326", # bad-whitespace
]
