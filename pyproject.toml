# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject

[tool.poetry]
name = "jmbde"
version = "0.2.2"
description = "A BDE tool"
authors = ["Jürgen Mülbert <juergen.muelbert@outlook.de>"]
license = "GPL-3.0"
readme = "README.rst"
homepage = "https://github.com/jmuelbert/jmbde-python"
repository = "https://github.com/jmuelbert/jmbde-python"
documentation = "https://jmbde-python.readthedocs.io"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = ["jmbde", "jmbde-python", "business", "BDE", "datebase"]

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU Public License 3.0 (GPL-3.0)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.6",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Topic :: Office/Business",
]

[tool.poetry.urls]
Changelog = "https://github.com/jmuelbert/jmbde-python/releases"

[tool.poetry.dependencies]
python = ">=3.6.5, <4.0"
click = "^8.0.0"
pyside2 = "^5.13.2"

[tool.poetry.dev-dependencies]
coverage = { extras = ["toml"], version = "^5.3" }
pytest = "^6.1.2"
safety = "^1.9.0"
mypy = "^0.910"
typeguard = "^2.10.0"
xdoctest = "^0.15.0"
sphinx = "^4.0.0"
sphinx-autobuild = "^2021.3.14"
pre-commit = "^2.7.1"
black = "^21.5b1"
flake8 = "^3.8.3"
flake8-bandit = "^2.1.2"
flake8-bugbear = "^21.4.3"
flake8-docstrings = "^1.5.0"
flake8-rst-docstrings = "^0.2.3"
pep8-naming = "^0.12.0"
darglint = "^1.5.5"
reorder-python-imports = "^2.3.6"
pre-commit-hooks = "^4.0.1"
faker = "^8.0.0"
openpyxl = "^3.0.5"


[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
jmbde = "jmbde.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["jmbde"]

[tool.coverage.report]
show_missing = true
fail_under = 12

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.black]
target-version = ['py36', 'py37', 'py38', 'py39', 'py310']
include = '''
    \.pyi?$
'''
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | ^lib/spack/external/
  | ^opt/
)/
'''

[tool.ruff]
fix = true

[tool.ruff.format]
docstring-code-line-length = 100
docstring-code-format = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Use of `assert` detected
  "S101",
  # Use `contextlib.suppress(SchemaRegistryException)` instead of `try`-`except`-`pass`
  "SIM105",
  # Missing explicit `return` at the end of function able to return non-`None` value
  "RET503",
  # Unnecessary assignment to
  "RET504",
  # Unnecessary `else` after `return` statement
  "RET505",
  # Unnecessary `elif` after `raise` statement
  "RET506",
  # Possible hardcoded password
  "S105",
  "S106",
  # "PLR",  # Design related pylint codes
  # RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF012",
  # Use `X | Y` for type annotations
  "UP007",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
  "S101",    # asserts allowed in tests...
  "FBT",     # don"t care about booleans as positional arguments in tests
  "INP001",  # no implicit namespace
  "D",       # don"t care about documentation in tests
  "S603",    # `subprocess` call: check for execution of untrusted input
  "PLR2004", # Magic value used in comparison, consider replacing with a constant variable
]

[tool.isort]
profile = "black"
src_paths = ["src/checkconnect", "tests"]
honor_noqa = true

[tool.codespell]
builtin = "clear,rare,informal,usage,code,names"
write-changes = true
count = true
skip = "*.svg,pyproject.toml,LICENSE,LICENSES/*,.github/actions/*"
ignore-words-list = "master"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config", "--color=yes"]
xfail_strict = true
junit_family = "xunit2"
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = ["tests"]
markers = [
  "save_engine: marks some of the tests which are using an external package to save a chart to e.g. a png file. This mark is used to run those tests selectively in the build GitHub Action.",
]

[tool.mypy]
disallow_untyped_defs = false
disallow_incomplete_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
strict = true
explicit_package_bases = true
namespace_packages = true
warn_no_return = false
warn_unused_ignores = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
module = ['checkconnect.*', 'virtualenv.*']
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
warn_no_return = true


[tool.pylint]
max-args = 12
max-branches = 110
max-returns = 12
max-statements = 289